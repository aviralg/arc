#+TITLE: Aviral's Emacs Configuration
#+AUTHOR: Aviral Goel
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Table of Contents :toc:
- [[#principles][Principles]]
- [[#installation][Installation]]
  - [[#rg][rg]]
- [[#package-management][Package Management]]
- [[#interface-enhancement][Interface Enhancement]]
  - [[#dashboard][dashboard]]
    - [[#study-the-different-configuration-variables-and-change-the-logo][Study the different configuration variables, and change the logo.]]
  - [[#pulsar][pulsar]]
    - [[#check-consult-after-jump-hook-after-consult-is-installed][check 'consult-after-jump-hook after consult is installed.]]
  - [[#volatile-highlights][volatile-highlights]]
    - [[#figure-out-how-to-vhldefine-extension-for-vundo][figure out how to `vhl/define-extension` for `vundo`]]
    - [[#find-better-alternatives-to-this-package][find better alternatives to this package]]
- [[#git][Git]]
    - [[#--evaluate-gited-dired-git-info-and-satchel-from-elpa][- evaluate gited, dired-git-info, and satchel from ELPA]]
  - [[#git-modes][git-modes]]
  - [[#git-timemachine][git-timemachine]]
  - [[#git-messenger][git-messenger]]
  - [[#git-undo][git-undo]]
  - [[#git-link][git-link]]
  - [[#diff-hl][diff-hl]]
    - [[#figure-out-dired-mode-support-and-diff-hl-show-hunk-mouse-mode][figure out dired mode support and diff-hl-show-hunk-mouse-mode]]
  - [[#magit][magit]]
  - [[#forge][forge]]
    - [[#setup-forge-keybindings][setup forge keybindings]]
  - [[#magit-todos][magit-todos]]
    - [[#--magit-todos-mode-should-be-activated-in-a-magit-buffer][- ~magit-todos-mode~ should be activated in a magit buffer.]]
  - [[#magit-lfs][magit-lfs]]
- [[#miscellaneous][Miscellaneous]]
  - [[#copy-as-format][copy-as-format]]
    - [[#figure-out-keybindings-for-other-formats-or-remove-all-keybindings][figure out keybindings for other formats or remove all keybindings]]
- [[#integration][Integration]]
  - [[#console][Console]]
    - [[#exec-path-from-shell][exec-path-from-shell]]
    - [[#shell-pop][shell-pop]]
    - [[#figure-out-how-to-quickly-close-the-popped-shell][figure out how to quickly close the popped shell]]
    - [[#eshell][eshell]]
      - [[#eshell-bookmark][eshell-bookmark]]
      - [[#esh-buf-stack][esh-buf-stack]]
      - [[#eshell-did-you-mean][eshell-did-you-mean]]
      - [[#eshell-syntax-highlighting][eshell-syntax-highlighting]]
      - [[#eshell-fringe-status][eshell-fringe-status]]
      - [[#eshell-z][eshell-z]]
    - [[#is-it-better-to-use-fzf-or-fasd][is it better to use fzf or fasd?]]
      - [[#esh-help][esh-help]]
      - [[#esh-autosuggest][esh-autosuggest]]
- [[#internet][Internet]]
  - [[#browser][Browser]]
  - [[#mail][Mail]]
  - [[#irc][IRC]]
  - [[#chat][Chat]]
  - [[#social-network][Social Network]]
  - [[#web-feed][Web Feed]]
    - [[#elfeed][elfeed]]
      - [[#elfeed-org][elfeed-org]]
        - [[#is-this-better-than-supplying-url-in-el-files][is this better than supplying URL in .el files?]]
      - [[#elfeed-tube][elfeed-tube]]
        - [[#check-configuration-in-detail][check configuration in detail]]
      - [[#elfeed-summary][elfeed-summary]]
      - [[#elfeed-][elfeed-]]
  - [[#ftp][FTP]]
  - [[#torrent][Torrent]]
    - [[#mentor][mentor]]
- [[#devops][DevOps]]
  - [[#docker][docker]]
- [[#package-management-1][Package Management]]
  - [[#package-manager][Package Manager]]
  - [[#package-configuration][Package Configuration]]
  - [[#package-updates][Package Updates]]
- [[#config-management][Config Management]]
- [[#library][Library]]
  - [[#dash][dash]]
  - [[#s][s]]
  - [[#ht][ht]]
  - [[#f][f]]
  - [[#ts][ts]]

* Principles

1. Use builtin features wherever possible.
2. Add a package iff the benefit outweighs its setup cost.
3. Prefer packages by influential package writers such as ~protesilaos~,
   ~@minad~, ~@tarsius~, ~@abo-abo~, ~@jwiegly~, and ~bbatsov~.
4. Consult ~@spacemacs~ and ~@doom~ for package configuration.

* Installation

** rg

:PROPERTIES:
:URL: https://github.com/BurntSushi/ripgrep
:END:

#+begin_src shell
  brew install ripgrep
#+end_src

* Package Management

Set package archives, refresh package database, and provide function to
conditionally install packages.

#+begin_src elisp
  (setq package-archives
        '(("melpa" . "https://melpa.org/packages/")
          ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  ;; install package if not already installed
  (defun package-require (&rest packages)
    (dolist (package packages)
      (unless (package-installed-p package)
        (package-install package))))

  ;; set INIT-DIR for later use
  (setq INIT-DIR (file-name-directory user-init-file))

  (defun init-dir-file (filename)
    (concat (file-name-as-directory INIT-DIR) filename))
#+end_src


* Interface Enhancement

** dashboard

:PROPERTIES:
:URL: [[https://github.com/emacs-dashboard/emacs-dashboard]]
:END:

Set a sensible startup screen that displays recently visited files, projects, bookmarks, agenda, and registers.

*** TODO Study the different configuration variables, and change the logo.

#+begin_src elisp
  (package-require 'dashboard)
  ;; Set the title
  (setq dashboard-banner-logo-title "")
  ;; Set the banner
  (setq dashboard-startup-banner 'logo)

  ;; Content is not centered by default. To center, set
  (setq dashboard-center-content t)

  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))

  (setq dashboard-items '((recents  . 5)
                          (projects . 5)
                          (bookmarks . 5)
                          (registers . 5)
                          (agenda . 5)))


  ;;(setq dashboard-display-icons-p t) ;; display icons on both GUI and terminal
  ;;(setq dashboard-icon-type 'nerd-icons) ;; use `nerd-icons' package
  ;; TODO: enable this after bug is fixed
  ;; https://github.com/emacs-dashboard/emacs-dashboard/issues/459
  ;;(setq dashboard-set-heading-icons t)
  ;;(setq dashboard-set-file-icons t)

  (setq dashboard-set-navigator t)
  (setq dashboard-set-init-info t)
  (setq dashboard-set-footer nil)
  (setq dashboard-projects-switch-function 'projectile-persp-switch-project)
  ;;(setq dashboard-week-agenda t)
  (setq dashboard-filter-agenda-entry 'dashboard-no-filter-agenda)

  (dashboard-setup-startup-hook)
#+end_src

** pulsar

:PROPERTIES:
:URL: https://github.com/protesilaos/pulsar
:END:

Pulse highlight line on demand or after running select functions.

*** TODO check 'consult-after-jump-hook after consult is installed.

#+begin_src elisp
  (package-require 'pulsar)

  ;; Check the default value of `pulsar-pulse-functions'.  That is where
  ;; you add more commands that should cause a pulse after they are
  ;; invoked

  (setq pulsar-pulse t)
  (setq pulsar-delay 0.055)
  (setq pulsar-iterations 10)
  (setq pulsar-face 'pulsar-magenta)
  (setq pulsar-highlight-face 'pulsar-yellow)

  (pulsar-global-mode 1)

  (add-hook 'next-error-hook #'pulsar-pulse-line)
  (add-hook 'minibuffer-setup-hook #'pulsar-pulse-line)

  ;; integration with the `consult' package:
  (add-hook 'consult-after-jump-hook #'pulsar-recenter-top)
  (add-hook 'consult-after-jump-hook #'pulsar-reveal-entry)

  ;; integration with the built-in `imenu':
  (add-hook 'imenu-after-jump-hook #'pulsar-recenter-top)
  (add-hook 'imenu-after-jump-hook #'pulsar-reveal-entry)

  ;; pulsar does not define any key bindings.  This is just a sample that
  ;; respects the key binding conventions.  Evaluate:
  ;;
  ;;     (info "(elisp) Key Binding Conventions")
  ;;
  ;; The author uses C-x l for `pulsar-pulse-line' and C-x L for
  ;; `pulsar-highlight-line'.
  ;;
  ;; You can replace `pulsar-highlight-line' with the command
  ;; `pulsar-highlight-dwim'.
  (let ((map global-map))
    (define-key map (kbd "C-c h p") #'pulsar-pulse-line)
    (define-key map (kbd "C-c h h") #'pulsar-highlight-line))
#+end_src

** volatile-highlights

:PROPERTIES:
:URL: https://github.com/k-talo/volatile-highlights.el
:END:

Bring visual feedback to cut, copy, paste, occur, and search.

*** TODO figure out how to `vhl/define-extension` for `vundo`
*** TODO find better alternatives to this package

#+begin_src elisp
  (package-require 'volatile-highlights)

  (volatile-highlights-mode t)

  ;; undo-tree
  ;;(with-eval-after-load 'undo-tree
  ;;  (vhl/define-extension 'undo-tree
  ;;                        'undo-tree-move
  ;;                        'undo-tree-yank)
  ;;  (vhl/install-extension 'undo-tree)
  ;;  (vhl/load-extension 'undo-tree)))
#+end_src


* TODO Git

*** TODO - evaluate gited, dired-git-info, and satchel from ELPA

** git-modes

:PROPERTIES:
:URL: https://github.com/magit/git-modes
:END:

#+begin_src elisp
  (package-require 'git-modes)
  (add-to-list 'auto-mode-alist
             (cons "/.dockerignore\\'" 'gitignore-mode))
#+end_src

** git-timemachine

:PROPERTIES:
:URL: https://codeberg.org/pidu/git-timemachine
:END:

#+begin_src elisp
  (package-require 'git-timemachine)
#+end_src

** TODO git-messenger

:PROPERTIES:
:URL: https://github.com/emacsorphanage/git-messenger
:END:

#+begin_src elisp
  (package-require 'git-messenger)

  (global-set-key (kbd "C-x v p") 'git-messenger:popup-message)
  ;; TODO - (define-key git-messenger-map (kbd "m") 'git-messenger:copy-message)
  ;; Use magit-show-commit for showing status/diff commands
  (custom-set-variables '(git-messenger:use-magit-popup t))
#+end_src

** TODO git-undo

:PROPERTIES:
:URL: https://github.com/jwiegley/git-undo-el
:END:

#+begin_src elisp
  ;; TODO - download this manually (package-require 'git-undo)
#+end_src

** git-link

:PROPERTIES:
:URL: https://github.com/sshaw/git-link
:END:

#+begin_src elisp
  (package-require 'git-link)
  (global-set-key (kbd "C-c g l") 'git-link)
#+end_src

** diff-hl

:PROPERTIES:
:URL: https://github.com/dgutov/diff-hl
:END:

*** TODO figure out dired mode support and diff-hl-show-hunk-mouse-mode

#+begin_src elisp
  (package-require 'diff-hl)
  (global-diff-hl-mode)
  (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
  (diff-hl-show-hunk-mouse-mode)
#+end_src

** magit

:PROPERTIES:
:URL: https://magit.vc
:END:

#+begin_src elisp
  (package-require 'magit)
#+end_src

** TODO forge

*** TODO setup forge keybindings

:PROPERTIES:
:URL: https://magit.vc
:END:

#+begin_src elisp
  (package-require 'magit 'forge)
#+end_src

** TODO magit-todos

:PROPERTIES:
:URL: https://github.com/alphapapa/magit-todos
:END:

*** TODO - ~magit-todos-mode~ should be activated in a magit buffer.

#+begin_src elisp
  (package-require 'async
                   'dash
                   'f
                   'hl-todo
                   'magit
                   'pcre2el
                   's
                   'magit-todos)
  (magit-todos-mode)
#+end_src

** magit-lfs

:PROPERTIES:
:URL: https://github.com/Ailrun/magit-lfs
:END:

#+begin_src elisp
  (package-require 'magit-lfs)
#+end_src

* Miscellaneous

** copy-as-format

:PROPERTIES:
:URL: https://github.com/sshaw/copy-as-format
:END:

*** TODO figure out keybindings for other formats or remove all keybindings

#+begin_src elisp
  (package-require 'copy-as-format)
  (global-set-key (kbd "C-c w s") 'copy-as-format-slack)
  (global-set-key (kbd "C-c w g") 'copy-as-format-github)
#+end_src

* Integration

** Console

*** exec-path-from-shell

:PROPERTIES:
:URL: https://github.com/purcell/exec-path-from-shell
:END:

#+begin_src elisp
  (package-require 'exec-path-from-shell)

  ;; copied from https://github.com/purcell/emacs.d/blob/aae26a2f66deac354daefd87b136913889cc2825/lisp/init-exec-path.el#L5
  (with-eval-after-load 'exec-path-from-shell
    (dolist (var '("SSH_AUTH_SOCK" "SSH_AGENT_PID" "GPG_AGENT_INFO" "LANG" "LC_CTYPE" "NIX_SSL_CERT_FILE" "NIX_PATH"))
      (add-to-list 'exec-path-from-shell-variables var)))


  (when (or (memq window-system '(mac ns x pgtk))
            (unless (memq system-type '(ms-dos windows-nt))
              (daemonp)))
    (exec-path-from-shell-initialize))

#+end_src

*** TODO shell-pop

:PROPERTIES:
:URL: https://github.com/kyagi/shell-pop-el
:END:

*** TODO figure out how to quickly close the popped shell

#+begin_src elisp
  (package-require 'shell-pop)
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(shell-pop-default-directory "~")
   '(shell-pop-shell-type (quote ("eshell" "*eshell*" (lambda () (eshell)))))
   '(shell-pop-term-shell "/bin/zsh")
   '(shell-pop-universal-key "C-c C-t")
   '(shell-pop-window-size 30)
   '(shell-pop-full-span t)
   '(shell-pop-window-position "bottom")
   '(shell-pop-autocd-to-working-dir t)
   '(shell-pop-restore-window-configuration t)
   '(shell-pop-cleanup-buffer-at-process-exit t))
#+end_src


*** eshell

**** eshell-bookmark

:PROPERTIES:
:URL: https://github.com/Fuco1/eshell-bookmark
:END:

#+begin_src elisp
  (package-require 'eshell-bookmark)
  (add-hook 'eshell-mode-hook 'eshell-bookmark-setup)
#+end_src

**** esh-buf-stack

:PROPERTIES:
:URL: https://github.com/tom-tan/esh-buf-stack
:END:

#+begin_src elisp
  (package-require 'esh-buf-stack)
  (setup-eshell-buf-stack)
  (add-hook 'eshell-mode-hook
            (lambda ()
              (local-set-key
               (kbd "M-q") 'eshell-push-command)))
#+end_src

**** eshell-did-you-mean

:PROPERTIES:
:URL: https://github.com/xuchunyang/eshell-did-you-mean
:END:

#+begin_src elisp
  (package-require 'eshell-did-you-mean)
  (eshell-did-you-mean-setup)
#+end_src

**** eshell-syntax-highlighting

:PROPERTIES:
:URL: https://github.com/akreisher/eshell-syntax-highlighting
:END:

#+begin_src elisp
  (package-require 'eshell-syntax-highlighting)
  (eshell-syntax-highlighting-global-mode +1)
#+end_src

**** eshell-fringe-status

:PROPERTIES:
:URL: https://github.com/ryuslash/eshell-fringe-status/tree/adc6997c68e39c0d52a2af1b2fd5cf2057783797
:END:

#+begin_src elisp
  (package-require 'eshell-fringe-status)
  (add-hook 'eshell-mode-hook 'eshell-fringe-status-mode)
#+end_src

**** TODO eshell-z

:PROPERTIES:
:URL: https://melpa.org/#/eshell-z
:END:

*** is it better to use fzf or fasd?

#+begin_src elisp
  (package-require 'eshell-z)
  (add-hook 'eshell-mode-hook
            (defun my-eshell-mode-hook ()
              (require 'eshell-z)))
#+end_src

**** esh-help

:PROPERTIES:
:URL: https://github.com/tom-tan/esh-help/
:END:

#+begin_src elisp
  (package-require 'esh-help)
  (setup-esh-help-eldoc)
#+end_src

**** esh-autosuggest

:PROPERTIES:
:URL: https://github.com/dieggsy/esh-autosuggest
:END:

#+begin_src elisp
  (package-require 'esh-autosuggest)
  (add-hook 'eshell-mode-hook #'esh-autosuggest-mode)
#+end_src

* Internet

** Browser

** Mail

** IRC

** Chat

** Social Network

** Web Feed

*** elfeed

:PROPERTIES:
:URL: https://github.com/skeeto/elfeed
:END:

#+begin_src elisp
  (package-require 'elfeed)
  (global-set-key (kbd "C-x w") 'elfeed)
#+end_src

**** TODO elfeed-org

:PROPERTIES:
:URL: https://github.com/remyhonig/elfeed-org
:END:

***** TODO is this better than supplying URL in .el files?

#+begin_src elisp
  ;; Load elfeed-org
  (package-require 'elfeed-org)

  ;; Initialize elfeed-org
  ;; This hooks up elfeed-org to read the configuration when elfeed
  ;; is started with =M-x elfeed=
  (elfeed-org)

  ;; Optionally specify a number of files containing elfeed
  ;; configuration. If not set then the location below is used.
  ;; Note: The customize interface is also supported.
  (setq rmh-elfeed-org-files (list (init-dir-file "elfeed.org")))
#+end_src

**** TODO elfeed-tube

***** TODO check configuration in detail

:PROPERTIES:
:URL: https://github.com/karthink/elfeed-tube
:END:

#+begin_src elisp
  (package-require 'mpv 'aio 'elfeed-tube)
  (require 'elfeed-tube)
  (elfeed-tube-setup)
  (define-key elfeed-show-mode-map (kbd "F") 'elfeed-tube-fetch)
  (define-key elfeed-show-mode-map [remap save-buffer] 'elfeed-tube-save)
  (define-key elfeed-search-mode-map (kbd "F") 'elfeed-tube-fetch)
  (define-key elfeed-search-mode-map [remap save-buffer] 'elfeed-tube-save)
#+end_src

#+begin_src elisp
  (package-require 'elfeed-tube-mpv)
  (require 'elfeed-tube-mpv)
  (define-key elfeed-show-mode-map (kbd "C-c C-f") 'elfeed-tube-mpv-follow-mode)
  (define-key elfeed-show-mode-map (kbd "C-c C-w") 'elfeed-tube-mpv-where)
#+end_src

**** TODO elfeed-summary

**** TODO elfeed-

** FTP

** TODO Torrent

*** TODO mentor


* DevOps

** docker

:PROPERTIES:
:URL: https://github.com/Silex/docker.el
:END:

#+begin_src elisp
  (package-require 'docker)
  (global-set-key (kbd "C-c d") 'docker)
#+end_src

* Package Management

** Package Manager

** Package Configuration

** Package Updates

* Config Management


* Library

** dash

:PROPERTIES:
:URL: https://github.com/magnars/dash.el
:END:

#+begin_src elisp
  (package-require 'dash)
  (global-dash-fontify-mode)
  (dash-register-info-lookup)
#+end_src

** s

:PROPERTIES:
:URL: https://github.com/magnars/s.el
:END:

#+begin_src elisp
  (package-require 's)
#+end_src

** ht

:PROPERTIES:
:URL: https://github.com/Wilfred/ht.el
:END:

#+begin_src elisp
  (package-require 'ht)
#+end_src

** f

:PROPERTIES:
:URL: https://github.com/rejeep/f.el
:END:

#+begin_src elisp
  (package-require 'f)
#+end_src

** ts

:PROPERTIES:
:URL: https://github.com/alphapapa/ts.el
:END:

#+begin_src elisp
  (package-require 'ts)
#+end_src

